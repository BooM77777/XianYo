package com.project.model;

import java.util.ArrayList;
import java.util.List;

public class AlReadComplaintDataExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public AlReadComplaintDataExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andComplaintuseridIsNull() {
            addCriterion("complaintUserID is null");
            return (Criteria) this;
        }

        public Criteria andComplaintuseridIsNotNull() {
            addCriterion("complaintUserID is not null");
            return (Criteria) this;
        }

        public Criteria andComplaintuseridEqualTo(Long value) {
            addCriterion("complaintUserID =", value, "complaintuserid");
            return (Criteria) this;
        }

        public Criteria andComplaintuseridNotEqualTo(Long value) {
            addCriterion("complaintUserID <>", value, "complaintuserid");
            return (Criteria) this;
        }

        public Criteria andComplaintuseridGreaterThan(Long value) {
            addCriterion("complaintUserID >", value, "complaintuserid");
            return (Criteria) this;
        }

        public Criteria andComplaintuseridGreaterThanOrEqualTo(Long value) {
            addCriterion("complaintUserID >=", value, "complaintuserid");
            return (Criteria) this;
        }

        public Criteria andComplaintuseridLessThan(Long value) {
            addCriterion("complaintUserID <", value, "complaintuserid");
            return (Criteria) this;
        }

        public Criteria andComplaintuseridLessThanOrEqualTo(Long value) {
            addCriterion("complaintUserID <=", value, "complaintuserid");
            return (Criteria) this;
        }

        public Criteria andComplaintuseridIn(List<Long> values) {
            addCriterion("complaintUserID in", values, "complaintuserid");
            return (Criteria) this;
        }

        public Criteria andComplaintuseridNotIn(List<Long> values) {
            addCriterion("complaintUserID not in", values, "complaintuserid");
            return (Criteria) this;
        }

        public Criteria andComplaintuseridBetween(Long value1, Long value2) {
            addCriterion("complaintUserID between", value1, value2, "complaintuserid");
            return (Criteria) this;
        }

        public Criteria andComplaintuseridNotBetween(Long value1, Long value2) {
            addCriterion("complaintUserID not between", value1, value2, "complaintuserid");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridIsNull() {
            addCriterion("complaintedUserID is null");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridIsNotNull() {
            addCriterion("complaintedUserID is not null");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridEqualTo(Long value) {
            addCriterion("complaintedUserID =", value, "complainteduserid");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridNotEqualTo(Long value) {
            addCriterion("complaintedUserID <>", value, "complainteduserid");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridGreaterThan(Long value) {
            addCriterion("complaintedUserID >", value, "complainteduserid");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridGreaterThanOrEqualTo(Long value) {
            addCriterion("complaintedUserID >=", value, "complainteduserid");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridLessThan(Long value) {
            addCriterion("complaintedUserID <", value, "complainteduserid");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridLessThanOrEqualTo(Long value) {
            addCriterion("complaintedUserID <=", value, "complainteduserid");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridIn(List<Long> values) {
            addCriterion("complaintedUserID in", values, "complainteduserid");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridNotIn(List<Long> values) {
            addCriterion("complaintedUserID not in", values, "complainteduserid");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridBetween(Long value1, Long value2) {
            addCriterion("complaintedUserID between", value1, value2, "complainteduserid");
            return (Criteria) this;
        }

        public Criteria andComplainteduseridNotBetween(Long value1, Long value2) {
            addCriterion("complaintedUserID not between", value1, value2, "complainteduserid");
            return (Criteria) this;
        }

        public Criteria andInformationidIsNull() {
            addCriterion("informationID is null");
            return (Criteria) this;
        }

        public Criteria andInformationidIsNotNull() {
            addCriterion("informationID is not null");
            return (Criteria) this;
        }

        public Criteria andInformationidEqualTo(Long value) {
            addCriterion("informationID =", value, "informationid");
            return (Criteria) this;
        }

        public Criteria andInformationidNotEqualTo(Long value) {
            addCriterion("informationID <>", value, "informationid");
            return (Criteria) this;
        }

        public Criteria andInformationidGreaterThan(Long value) {
            addCriterion("informationID >", value, "informationid");
            return (Criteria) this;
        }

        public Criteria andInformationidGreaterThanOrEqualTo(Long value) {
            addCriterion("informationID >=", value, "informationid");
            return (Criteria) this;
        }

        public Criteria andInformationidLessThan(Long value) {
            addCriterion("informationID <", value, "informationid");
            return (Criteria) this;
        }

        public Criteria andInformationidLessThanOrEqualTo(Long value) {
            addCriterion("informationID <=", value, "informationid");
            return (Criteria) this;
        }

        public Criteria andInformationidIn(List<Long> values) {
            addCriterion("informationID in", values, "informationid");
            return (Criteria) this;
        }

        public Criteria andInformationidNotIn(List<Long> values) {
            addCriterion("informationID not in", values, "informationid");
            return (Criteria) this;
        }

        public Criteria andInformationidBetween(Long value1, Long value2) {
            addCriterion("informationID between", value1, value2, "informationid");
            return (Criteria) this;
        }

        public Criteria andInformationidNotBetween(Long value1, Long value2) {
            addCriterion("informationID not between", value1, value2, "informationid");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonIsNull() {
            addCriterion("complaintReason is null");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonIsNotNull() {
            addCriterion("complaintReason is not null");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonEqualTo(String value) {
            addCriterion("complaintReason =", value, "complaintreason");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonNotEqualTo(String value) {
            addCriterion("complaintReason <>", value, "complaintreason");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonGreaterThan(String value) {
            addCriterion("complaintReason >", value, "complaintreason");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonGreaterThanOrEqualTo(String value) {
            addCriterion("complaintReason >=", value, "complaintreason");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonLessThan(String value) {
            addCriterion("complaintReason <", value, "complaintreason");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonLessThanOrEqualTo(String value) {
            addCriterion("complaintReason <=", value, "complaintreason");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonLike(String value) {
            addCriterion("complaintReason like", value, "complaintreason");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonNotLike(String value) {
            addCriterion("complaintReason not like", value, "complaintreason");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonIn(List<String> values) {
            addCriterion("complaintReason in", values, "complaintreason");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonNotIn(List<String> values) {
            addCriterion("complaintReason not in", values, "complaintreason");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonBetween(String value1, String value2) {
            addCriterion("complaintReason between", value1, value2, "complaintreason");
            return (Criteria) this;
        }

        public Criteria andComplaintreasonNotBetween(String value1, String value2) {
            addCriterion("complaintReason not between", value1, value2, "complaintreason");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated do_not_delete_during_merge Fri Sep 08 10:01:11 CST 2017
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table alreadcomplaintinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}