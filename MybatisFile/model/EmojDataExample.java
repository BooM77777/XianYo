package com.project.model;

import java.util.ArrayList;
import java.util.List;

public class EmojDataExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public EmojDataExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andWordIsNull() {
            addCriterion("word is null");
            return (Criteria) this;
        }

        public Criteria andWordIsNotNull() {
            addCriterion("word is not null");
            return (Criteria) this;
        }

        public Criteria andWordEqualTo(String value) {
            addCriterion("word =", value, "word");
            return (Criteria) this;
        }

        public Criteria andWordNotEqualTo(String value) {
            addCriterion("word <>", value, "word");
            return (Criteria) this;
        }

        public Criteria andWordGreaterThan(String value) {
            addCriterion("word >", value, "word");
            return (Criteria) this;
        }

        public Criteria andWordGreaterThanOrEqualTo(String value) {
            addCriterion("word >=", value, "word");
            return (Criteria) this;
        }

        public Criteria andWordLessThan(String value) {
            addCriterion("word <", value, "word");
            return (Criteria) this;
        }

        public Criteria andWordLessThanOrEqualTo(String value) {
            addCriterion("word <=", value, "word");
            return (Criteria) this;
        }

        public Criteria andWordLike(String value) {
            addCriterion("word like", value, "word");
            return (Criteria) this;
        }

        public Criteria andWordNotLike(String value) {
            addCriterion("word not like", value, "word");
            return (Criteria) this;
        }

        public Criteria andWordIn(List<String> values) {
            addCriterion("word in", values, "word");
            return (Criteria) this;
        }

        public Criteria andWordNotIn(List<String> values) {
            addCriterion("word not in", values, "word");
            return (Criteria) this;
        }

        public Criteria andWordBetween(String value1, String value2) {
            addCriterion("word between", value1, value2, "word");
            return (Criteria) this;
        }

        public Criteria andWordNotBetween(String value1, String value2) {
            addCriterion("word not between", value1, value2, "word");
            return (Criteria) this;
        }

        public Criteria andWordtypeIsNull() {
            addCriterion("wordtype is null");
            return (Criteria) this;
        }

        public Criteria andWordtypeIsNotNull() {
            addCriterion("wordtype is not null");
            return (Criteria) this;
        }

        public Criteria andWordtypeEqualTo(Integer value) {
            addCriterion("wordtype =", value, "wordtype");
            return (Criteria) this;
        }

        public Criteria andWordtypeNotEqualTo(Integer value) {
            addCriterion("wordtype <>", value, "wordtype");
            return (Criteria) this;
        }

        public Criteria andWordtypeGreaterThan(Integer value) {
            addCriterion("wordtype >", value, "wordtype");
            return (Criteria) this;
        }

        public Criteria andWordtypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("wordtype >=", value, "wordtype");
            return (Criteria) this;
        }

        public Criteria andWordtypeLessThan(Integer value) {
            addCriterion("wordtype <", value, "wordtype");
            return (Criteria) this;
        }

        public Criteria andWordtypeLessThanOrEqualTo(Integer value) {
            addCriterion("wordtype <=", value, "wordtype");
            return (Criteria) this;
        }

        public Criteria andWordtypeIn(List<Integer> values) {
            addCriterion("wordtype in", values, "wordtype");
            return (Criteria) this;
        }

        public Criteria andWordtypeNotIn(List<Integer> values) {
            addCriterion("wordtype not in", values, "wordtype");
            return (Criteria) this;
        }

        public Criteria andWordtypeBetween(Integer value1, Integer value2) {
            addCriterion("wordtype between", value1, value2, "wordtype");
            return (Criteria) this;
        }

        public Criteria andWordtypeNotBetween(Integer value1, Integer value2) {
            addCriterion("wordtype not between", value1, value2, "wordtype");
            return (Criteria) this;
        }

        public Criteria andJoyIsNull() {
            addCriterion("joy is null");
            return (Criteria) this;
        }

        public Criteria andJoyIsNotNull() {
            addCriterion("joy is not null");
            return (Criteria) this;
        }

        public Criteria andJoyEqualTo(Double value) {
            addCriterion("joy =", value, "joy");
            return (Criteria) this;
        }

        public Criteria andJoyNotEqualTo(Double value) {
            addCriterion("joy <>", value, "joy");
            return (Criteria) this;
        }

        public Criteria andJoyGreaterThan(Double value) {
            addCriterion("joy >", value, "joy");
            return (Criteria) this;
        }

        public Criteria andJoyGreaterThanOrEqualTo(Double value) {
            addCriterion("joy >=", value, "joy");
            return (Criteria) this;
        }

        public Criteria andJoyLessThan(Double value) {
            addCriterion("joy <", value, "joy");
            return (Criteria) this;
        }

        public Criteria andJoyLessThanOrEqualTo(Double value) {
            addCriterion("joy <=", value, "joy");
            return (Criteria) this;
        }

        public Criteria andJoyIn(List<Double> values) {
            addCriterion("joy in", values, "joy");
            return (Criteria) this;
        }

        public Criteria andJoyNotIn(List<Double> values) {
            addCriterion("joy not in", values, "joy");
            return (Criteria) this;
        }

        public Criteria andJoyBetween(Double value1, Double value2) {
            addCriterion("joy between", value1, value2, "joy");
            return (Criteria) this;
        }

        public Criteria andJoyNotBetween(Double value1, Double value2) {
            addCriterion("joy not between", value1, value2, "joy");
            return (Criteria) this;
        }

        public Criteria andSadIsNull() {
            addCriterion("sad is null");
            return (Criteria) this;
        }

        public Criteria andSadIsNotNull() {
            addCriterion("sad is not null");
            return (Criteria) this;
        }

        public Criteria andSadEqualTo(Double value) {
            addCriterion("sad =", value, "sad");
            return (Criteria) this;
        }

        public Criteria andSadNotEqualTo(Double value) {
            addCriterion("sad <>", value, "sad");
            return (Criteria) this;
        }

        public Criteria andSadGreaterThan(Double value) {
            addCriterion("sad >", value, "sad");
            return (Criteria) this;
        }

        public Criteria andSadGreaterThanOrEqualTo(Double value) {
            addCriterion("sad >=", value, "sad");
            return (Criteria) this;
        }

        public Criteria andSadLessThan(Double value) {
            addCriterion("sad <", value, "sad");
            return (Criteria) this;
        }

        public Criteria andSadLessThanOrEqualTo(Double value) {
            addCriterion("sad <=", value, "sad");
            return (Criteria) this;
        }

        public Criteria andSadIn(List<Double> values) {
            addCriterion("sad in", values, "sad");
            return (Criteria) this;
        }

        public Criteria andSadNotIn(List<Double> values) {
            addCriterion("sad not in", values, "sad");
            return (Criteria) this;
        }

        public Criteria andSadBetween(Double value1, Double value2) {
            addCriterion("sad between", value1, value2, "sad");
            return (Criteria) this;
        }

        public Criteria andSadNotBetween(Double value1, Double value2) {
            addCriterion("sad not between", value1, value2, "sad");
            return (Criteria) this;
        }

        public Criteria andFearIsNull() {
            addCriterion("fear is null");
            return (Criteria) this;
        }

        public Criteria andFearIsNotNull() {
            addCriterion("fear is not null");
            return (Criteria) this;
        }

        public Criteria andFearEqualTo(Double value) {
            addCriterion("fear =", value, "fear");
            return (Criteria) this;
        }

        public Criteria andFearNotEqualTo(Double value) {
            addCriterion("fear <>", value, "fear");
            return (Criteria) this;
        }

        public Criteria andFearGreaterThan(Double value) {
            addCriterion("fear >", value, "fear");
            return (Criteria) this;
        }

        public Criteria andFearGreaterThanOrEqualTo(Double value) {
            addCriterion("fear >=", value, "fear");
            return (Criteria) this;
        }

        public Criteria andFearLessThan(Double value) {
            addCriterion("fear <", value, "fear");
            return (Criteria) this;
        }

        public Criteria andFearLessThanOrEqualTo(Double value) {
            addCriterion("fear <=", value, "fear");
            return (Criteria) this;
        }

        public Criteria andFearIn(List<Double> values) {
            addCriterion("fear in", values, "fear");
            return (Criteria) this;
        }

        public Criteria andFearNotIn(List<Double> values) {
            addCriterion("fear not in", values, "fear");
            return (Criteria) this;
        }

        public Criteria andFearBetween(Double value1, Double value2) {
            addCriterion("fear between", value1, value2, "fear");
            return (Criteria) this;
        }

        public Criteria andFearNotBetween(Double value1, Double value2) {
            addCriterion("fear not between", value1, value2, "fear");
            return (Criteria) this;
        }

        public Criteria andAngerIsNull() {
            addCriterion("anger is null");
            return (Criteria) this;
        }

        public Criteria andAngerIsNotNull() {
            addCriterion("anger is not null");
            return (Criteria) this;
        }

        public Criteria andAngerEqualTo(Double value) {
            addCriterion("anger =", value, "anger");
            return (Criteria) this;
        }

        public Criteria andAngerNotEqualTo(Double value) {
            addCriterion("anger <>", value, "anger");
            return (Criteria) this;
        }

        public Criteria andAngerGreaterThan(Double value) {
            addCriterion("anger >", value, "anger");
            return (Criteria) this;
        }

        public Criteria andAngerGreaterThanOrEqualTo(Double value) {
            addCriterion("anger >=", value, "anger");
            return (Criteria) this;
        }

        public Criteria andAngerLessThan(Double value) {
            addCriterion("anger <", value, "anger");
            return (Criteria) this;
        }

        public Criteria andAngerLessThanOrEqualTo(Double value) {
            addCriterion("anger <=", value, "anger");
            return (Criteria) this;
        }

        public Criteria andAngerIn(List<Double> values) {
            addCriterion("anger in", values, "anger");
            return (Criteria) this;
        }

        public Criteria andAngerNotIn(List<Double> values) {
            addCriterion("anger not in", values, "anger");
            return (Criteria) this;
        }

        public Criteria andAngerBetween(Double value1, Double value2) {
            addCriterion("anger between", value1, value2, "anger");
            return (Criteria) this;
        }

        public Criteria andAngerNotBetween(Double value1, Double value2) {
            addCriterion("anger not between", value1, value2, "anger");
            return (Criteria) this;
        }

        public Criteria andDisgustIsNull() {
            addCriterion("disgust is null");
            return (Criteria) this;
        }

        public Criteria andDisgustIsNotNull() {
            addCriterion("disgust is not null");
            return (Criteria) this;
        }

        public Criteria andDisgustEqualTo(Double value) {
            addCriterion("disgust =", value, "disgust");
            return (Criteria) this;
        }

        public Criteria andDisgustNotEqualTo(Double value) {
            addCriterion("disgust <>", value, "disgust");
            return (Criteria) this;
        }

        public Criteria andDisgustGreaterThan(Double value) {
            addCriterion("disgust >", value, "disgust");
            return (Criteria) this;
        }

        public Criteria andDisgustGreaterThanOrEqualTo(Double value) {
            addCriterion("disgust >=", value, "disgust");
            return (Criteria) this;
        }

        public Criteria andDisgustLessThan(Double value) {
            addCriterion("disgust <", value, "disgust");
            return (Criteria) this;
        }

        public Criteria andDisgustLessThanOrEqualTo(Double value) {
            addCriterion("disgust <=", value, "disgust");
            return (Criteria) this;
        }

        public Criteria andDisgustIn(List<Double> values) {
            addCriterion("disgust in", values, "disgust");
            return (Criteria) this;
        }

        public Criteria andDisgustNotIn(List<Double> values) {
            addCriterion("disgust not in", values, "disgust");
            return (Criteria) this;
        }

        public Criteria andDisgustBetween(Double value1, Double value2) {
            addCriterion("disgust between", value1, value2, "disgust");
            return (Criteria) this;
        }

        public Criteria andDisgustNotBetween(Double value1, Double value2) {
            addCriterion("disgust not between", value1, value2, "disgust");
            return (Criteria) this;
        }

        public Criteria andSurpriseIsNull() {
            addCriterion("surprise is null");
            return (Criteria) this;
        }

        public Criteria andSurpriseIsNotNull() {
            addCriterion("surprise is not null");
            return (Criteria) this;
        }

        public Criteria andSurpriseEqualTo(Double value) {
            addCriterion("surprise =", value, "surprise");
            return (Criteria) this;
        }

        public Criteria andSurpriseNotEqualTo(Double value) {
            addCriterion("surprise <>", value, "surprise");
            return (Criteria) this;
        }

        public Criteria andSurpriseGreaterThan(Double value) {
            addCriterion("surprise >", value, "surprise");
            return (Criteria) this;
        }

        public Criteria andSurpriseGreaterThanOrEqualTo(Double value) {
            addCriterion("surprise >=", value, "surprise");
            return (Criteria) this;
        }

        public Criteria andSurpriseLessThan(Double value) {
            addCriterion("surprise <", value, "surprise");
            return (Criteria) this;
        }

        public Criteria andSurpriseLessThanOrEqualTo(Double value) {
            addCriterion("surprise <=", value, "surprise");
            return (Criteria) this;
        }

        public Criteria andSurpriseIn(List<Double> values) {
            addCriterion("surprise in", values, "surprise");
            return (Criteria) this;
        }

        public Criteria andSurpriseNotIn(List<Double> values) {
            addCriterion("surprise not in", values, "surprise");
            return (Criteria) this;
        }

        public Criteria andSurpriseBetween(Double value1, Double value2) {
            addCriterion("surprise between", value1, value2, "surprise");
            return (Criteria) this;
        }

        public Criteria andSurpriseNotBetween(Double value1, Double value2) {
            addCriterion("surprise not between", value1, value2, "surprise");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table emojinfo_
     *
     * @mbggenerated do_not_delete_during_merge Fri Sep 08 10:01:11 CST 2017
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table emojinfo_
     *
     * @mbggenerated Fri Sep 08 10:01:11 CST 2017
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}